services:
  kafka:
    image: confluentinc/cp-kafka:8.0.0
    hostname: kafka
    container_name: kafka
    user: root
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # KRaft specific configurations
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # Performance optimizations for EXTREME throughput (50K+ msg/s)
      KAFKA_NUM_NETWORK_THREADS: 16
      KAFKA_NUM_IO_THREADS: 32
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 1048576
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_NUM_REPLICA_FETCHERS: 8
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576
      KAFKA_MESSAGE_MAX_BYTES: 104857600
      KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES: 104857600
      KAFKA_BATCH_SIZE: 131072
      KAFKA_LINGER_MS: 5
      KAFKA_COMPRESSION_TYPE: 'lz4'
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 100000
      KAFKA_LOG_FLUSH_INTERVAL_MS: 5000
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: 'delete'
      KAFKA_NUM_PARTITIONS: 48
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Extreme performance tuning
      KAFKA_REPLICA_LAG_TIME_MAX_MS: 30000
      KAFKA_REPLICA_SOCKET_TIMEOUT_MS: 30000
      KAFKA_CONTROLLER_SOCKET_TIMEOUT_MS: 30000
      KAFKA_REQUEST_TIMEOUT_MS: 30000
    volumes:
      - kafka-data:/var/lib/kafka/data
    command: >
      bash -c "
        mkdir -p /var/lib/kafka/data &&
        chown -R appuser:appuser /var/lib/kafka/data &&
        chmod -R 755 /var/lib/kafka/data &&
        /etc/confluent/docker/run
      "
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:8.0.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:8.0.0
    hostname: kafka-rest-proxy
    container_name: kafka-rest-proxy
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,DELETE,OPTIONS'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      KAFKA_REST_ACCESS_CONTROL_ALLOW_HEADERS: 'origin,content-type,accept,authorization'
      # Configurações balanceadas para máximo throughput estável
      KAFKA_REST_CONSUMER_THREADS: 50
      KAFKA_REST_PRODUCER_THREADS: 50
      KAFKA_REST_CONSUMER_ITERATOR_TIMEOUT_MS: 30000
      KAFKA_REST_PRODUCER_REQUEST_TIMEOUT_MS: 30000
      KAFKA_REST_SIMPLE_CONSUMER_MAX_POOL_SIZE: 100
      KAFKA_REST_CONSUMER_INSTANCE_TIMEOUT_MS: 300000
      KAFKA_REST_COMPRESSION_TYPE: 'lz4'
      # Configurações para estabilidade
      KAFKA_REST_PRODUCER_ACKS: 1
      KAFKA_REST_PRODUCER_RETRIES: 3
      KAFKA_REST_PRODUCER_BATCH_SIZE: 131072
      KAFKA_REST_PRODUCER_LINGER_MS: 5
      KAFKA_REST_PRODUCER_BUFFER_MEMORY: 67108864
      KAFKA_REST_BATCH_SIZE: 131072
      KAFKA_REST_LINGER_MS: 1
      KAFKA_REST_BUFFER_MEMORY: 268435456
      KAFKA_REST_MAX_REQUEST_SIZE: 104857600
      KAFKA_REST_ACKS: '0'
      KAFKA_REST_RETRIES: 0
      KAFKA_REST_RETRY_BACKOFF_MS: 50
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/topics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      kafka-rest-proxy:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-rest-proxy:8082
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kafka-network

  # === SERVIÇOS DE TESTE ===
  test-basic:
    build:
      context: .
      dockerfile: Dockerfile.tests
    command: ["scripts/load-test.py", "--messages", "1000", "--concurrency", "10", "--topic", "test", "--url", "http://kafka-rest-proxy:8082"]
    depends_on:
      kafka-rest-proxy:
        condition: service_healthy
    networks:
      - kafka-network
    profiles:
      - testing

  test-optimized:
    build:
      context: .
      dockerfile: Dockerfile.tests
    command: ["scripts/optimized-load-test.py", "--messages", "50000", "--concurrency", "200", "--batch-size", "500", "--topic", "test", "--url", "http://kafka-rest-proxy:8082"]
    depends_on:
      kafka-rest-proxy:
        condition: service_healthy
    networks:
      - kafka-network
    profiles:
      - testing

  test-extreme:
    build:
      context: .
      dockerfile: Dockerfile.tests
    command: ["scripts/extreme-50k-test.py", "--messages", "100000", "--concurrency", "500", "--batch-size", "1000", "--topic", "extreme-performance", "--url", "http://kafka-rest-proxy:8082"]
    depends_on:
      kafka-rest-proxy:
        condition: service_healthy
    networks:
      - kafka-network
    profiles:
      - testing

  test-64kb:
    build:
      context: .
      dockerfile: Dockerfile.tests
    command: ["scripts/working-64kb-test.py", "--messages", "1000", "--concurrency", "50", "--batch-size", "10", "--topic", "large-messages", "--url", "http://kafka-rest-proxy:8082"]
    depends_on:
      kafka-rest-proxy:
        condition: service_healthy
    networks:
      - kafka-network
    profiles:
      - testing

volumes:
  kafka-data:

networks:
  kafka-network:
    driver: bridge
